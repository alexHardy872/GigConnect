@model GigConnect.Models.ViewModels.VenueProfileViewModel





<div class="container">
    <div class="row">
        <div class="col-md-4 contentCol">
            <div>
                <h4>@Model.venue.venueName (@Model.venue.town)</h4>
                <br />
                <a href="@Model.venue.websiteUrl">Venue Website</a>

                @if (User.IsInRole("Band"))
                {
                    <button class="btn-default ">@Html.ActionLink("Send a Message", "Create", "Message", new { recipientId = Model.venue.VenueId, isBand = false }, null)</button>
                    <button class="btn-default">@Html.ActionLink("Book a Show", "Create", "Request", new { bandId = Model.currentBand.BandId, venueId = Model.venue.VenueId }, null)</button>
                    <h6>@Model.distance.travelDistance miles from you (@Model.distance.travelDuration minutes)</h6>
                }
                <br />
                <span>@GigConnect.Services.GeoCode.FormatAddress(Model.venue.Location)</span>
                <div id="map" style="height: 350px; width: 90%;"></div>


            </div>
            <div>
                <h4>Reviews</h4>
                @if (Model.reviews.Count == 0)
                {
                    <p> This venue does not have any reviews yet.. @Html.ActionLink("Be the first!", "Create", "Review", new { reviewedId = Model.venue.VenueId, isBand = false }, null)</p>
                }
                else
                {
                    <span id="score">Average rating (@Model.score/4) </span><button class="btn-default">@Html.ActionLink("Write a Review", "Create", "Review", new { reviewedId = Model.venue.VenueId, isBand = false })</button>

                    <table class="table">
                        @foreach (var review in Model.reviews)
                        {
                            <tr>
                                <td><strong>@review.rating</strong></td>
                                <td>@review.content</td>
                            </tr>
                        }
                    </table>
                }
            </div>
        </div>
        <div class="col-md-4 contentCol">
            <div>
                <h4>Upcoming Events at @Model.venue.venueName</h4>
                @if(Model.gigs.Count == 0)
                {
                    <br />
                    <p><i>No gigs on current schedule!</i></p>
                }
                else
                {
            <table class="table" style="width: 100%;">
                <tr>
                    <th>
                        Date
                    </th>
                    <th>
                        Time
                    </th>
                    <th>
                        Bands
                    </th>
                    <th>
                        Description
                    </th>
                    <th>

                    </th>
                </tr>

                @foreach (var gig in Model.gigs)
                {

                    <tr>
                        <td>@gig.gig.timeOfGig.ToShortDateString()</td>
                    
                        <td>@gig.gig.timeOfGig.ToString("hh:mm tt")</td>

                        <td>
                            @foreach (var band in gig.bands)
                            {
                     <span>@Html.ActionLink(band.bandName, "ViewBandProfile", "ProfileView", new { bandId = band.BandId }, null), </span>

                              }
                        </td>
                        <td>@gig.gig.description</td>
                    

                        <td>
                           @if (gig.gig.open == true && User.IsInRole("Band"))
                            {
                                <span>@Html.ActionLink("Request to Join", "Create", "Request", new { bandId = Model.currentBand.BandId, venueId = Model.venue.VenueId, gigId = gig.gig.GigId }, null), </span>
                            }
                            else
                            {
                                <span><i>this gig is closed to new bands</i></span>
                            }
                        </td>
                        </tr>


                }
            </table>
                }
            </div>
        </div>
        <div class="col-md-4">
           
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            
        </div>
        <div class="col-md-4">

        </div>
        <div class="col-md-4">

        </div>
    </div>
</div>














<script>
    var map;
    function initMap() {
        //pin to represent the teacher's location
        var venueLocation = { lat: @Model.venue.Location.lat, lng: @Model.venue.Location.lng};
        @if (User.IsInRole("Band"))
        {
          <text>
        var bandLocation = { lat: @Model.currentBand.Location.lat, lng: @Model.currentBand.Location.lng};
          </text>

        }
        //add a map
        map = new google.maps.Map(document.getElementById('map'), {
            zoom: 11,
            center: venueLocation
        });
        //roadmap style
        var mapOptions = {
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            styles: [{ featureType: 'all', stylers: [{ saturation: -100 }, { brightness: 5 }] }],
            scrollwheel: false
        };
        //add a marker
        var venueLocationMarker = new google.maps.Marker({ position: venueLocation, label: "@Model.venue.venueName", title: "Venue location", map: map });

        @if (User.IsInRole("Band"))
        {
            <text>
            var bandLocationMarker = new google.maps.Marker({ position: bandLocation, label: "@Model.currentBand.bandName", title: "Band location", map: map });

        </text>
        }
        //add a radius for max range

     }
</script>

@{
    var ApiUrlStr = GigConnect.Private.Keys.googleMapsApiUrl;
    var ApiKeyStr = GigConnect.Private.Keys.googleMapsApiKey;
    var ApiKeyCbk = GigConnect.Private.Keys.googleMapsCallback;
    string googleMapsRequest = ApiUrlStr + ApiKeyStr + ApiKeyCbk;}

<script src="@googleMapsRequest" async defer></script>

